version: '3.7'
services:
  user_service:
    image: user_service
    container_name: user_service
    build:
      context: .
      dockerfile: ./user_service/Dockerfile
    restart: always
    environment:
      USER_DB_HOST: "user_db"
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: "postgres"
      USER_DB_NAME: "postgres"
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      USER_COMMAND_SUBJECT: ${USER_COMMAND_SUBJECT}
      USER_REPLY_SUBJECT: ${USER_REPLY_SUBJECT}
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      JAEGER_AGENT_HOST: ${JAEGER_AGENT_HOST}
      JAEGER_AGENT_PORT: ${JAEGER_AGENT_PORT}
      JAEGER_SAMPLER_TYPE: ${JAEGER_SAMPLER_TYPE}
      JAEGER_SAMPLER_PARAM: ${JAEGER_SAMPLER_PARAM}
    networks:
      - servers
      - monitoring
    ports:
      - '8082:8082'
    depends_on:
      - user_db

  api_gateway:
    image: api_gateway
    container_name: api_gateway
    build:
      context: .
      dockerfile: ./api_gateway/Dockerfile
    restart: always
    ports:
      - '9090:9090'
    environment:
      USER_DB_HOST: "user_db"
      USER_DB_PORT: ${USER_DB_PORT}
      USER_DB_USER: ${USER_DB_USER}
      USER_DB_PASS: "postgres"
      USER_DB_NAME: "postgres"
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      USER_COMMAND_SUBJECT: ${USER_COMMAND_SUBJECT}
      USER_REPLY_SUBJECT: ${USER_REPLY_SUBJECT}
      GATEWAY_PORT: ${GATEWAY_PORT}
      USER_SERVICE_HOST: "user_service"
      POST_SERVICE_HOST: "post_service"
      MESSAGE_SERVICE_HOST: "message_service"
      USER_SERVICE_PORT: ${USER_SERVICE_PORT}
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      JAEGER_AGENT_HOST: ${JAEGER_AGENT_HOST}
      JAEGER_AGENT_PORT: ${JAEGER_AGENT_PORT}
      JAEGER_SAMPLER_TYPE: ${JAEGER_SAMPLER_TYPE}
      JAEGER_SAMPLER_PARAM: ${JAEGER_SAMPLER_PARAM}
    networks:
      - servers
      - monitoring
    depends_on:
      - user_db

  post_service:
    image: post_service
    container_name: post_service
    build:
      context: .
      dockerfile: ./post_service/Dockerfile
    restart: always
    ports:
      - '8083:8083'
    environment:
      POST_DB_HOST: "post_db"
      POST_DB_PORT: "27017"
      POST_SERVICE_PORT: ${POST_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      USER_COMMAND_SUBJECT: ${USER_COMMAND_SUBJECT}
      USER_REPLY_SUBJECT: ${USER_REPLY_SUBJECT}
      POST_NOTIFICATION_COMMAND_SUBJECT: ${POST_NOTIFICATION_COMMAND_SUBJECT}
      POST_NOTIFICATION_REPLY_SUBJECT: ${POST_NOTIFICATION_REPLY_SUBJECT}
      JOB_COMMAND_SUBJECT: ${JOB_COMMAND_SUBJECT}
      JOB_REPLY_SUBJECT: ${JOB_REPLY_SUBJECT}
      JAEGER_AGENT_HOST: ${JAEGER_AGENT_HOST}
      JAEGER_AGENT_PORT: ${JAEGER_AGENT_PORT}
      JAEGER_SAMPLER_TYPE: ${JAEGER_SAMPLER_TYPE}
      JAEGER_SAMPLER_PARAM: ${JAEGER_SAMPLER_PARAM}
    depends_on:
      - post_db
    networks:
      - servers
      - monitoring

  message_service:
    image: message_service
    container_name: message_service
    build:
      context: .
      dockerfile: ./message_service/Dockerfile
    restart: always
    ports:
      - '8085:8085'
    environment:
      MESSAGE_DB_HOST: "message_db"
      MESSAGE_DB_PORT: "27017"
      MESSAGE_SERVICE_PORT: ${MESSAGE_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      USER_COMMAND_SUBJECT: ${USER_COMMAND_SUBJECT}
      USER_REPLY_SUBJECT: ${USER_REPLY_SUBJECT}
      POST_NOTIFICATION_COMMAND_SUBJECT: ${POST_NOTIFICATION_COMMAND_SUBJECT}
      POST_NOTIFICATION_REPLY_SUBJECT: ${POST_NOTIFICATION_REPLY_SUBJECT}
      CONNECTION_NOTIFICATION_COMMAND_SUBJECT: ${CONNECTION_NOTIFICATION_COMMAND_SUBJECT}
      CONNECTION_NOTIFICATION_REPLY_SUBJECT: ${CONNECTION_NOTIFICATION_REPLY_SUBJECT}
      JAEGER_AGENT_HOST: ${JAEGER_AGENT_HOST}
      JAEGER_AGENT_PORT: ${JAEGER_AGENT_PORT}
      JAEGER_SAMPLER_TYPE: ${JAEGER_SAMPLER_TYPE}
      JAEGER_SAMPLER_PARAM: ${JAEGER_SAMPLER_PARAM}
    depends_on:
      - message_db
    networks:
      - servers
      - monitoring
    
  connection_service:
    image: connection_service
    container_name: connection_service
    build:
      context: .
      dockerfile: ./connection_service/Dockerfile
    restart: always
    ports:
      - '8084:8084'
    environment:
      CONNECTION_SERVICE_PORT: ${CONNECTION_SERVICE_PORT}
      NATS_HOST: ${NATS_HOST}
      NATS_PORT: ${NATS_PORT}
      NATS_USER: ${NATS_USER}
      NATS_PASS: ${NATS_PASS}
      USER_COMMAND_SUBJECT: ${USER_COMMAND_SUBJECT}
      USER_REPLY_SUBJECT: ${USER_REPLY_SUBJECT}
      CONNECTION_NOTIFICATION_COMMAND_SUBJECT: ${CONNECTION_NOTIFICATION_COMMAND_SUBJECT}
      CONNECTION_NOTIFICATION_REPLY_SUBJECT: ${CONNECTION_NOTIFICATION_REPLY_SUBJECT}
      JOB_COMMAND_SUBJECT: ${JOB_COMMAND_SUBJECT} 
      JOB_REPLY_SUBJECT: ${JOB_REPLY_SUBJECT}
    depends_on:
      - neo4j
    networks:
      - servers
      - monitoring

  user_db:
    image: postgres:14.1-alpine
    restart: always
    networks:
      - servers
      - monitoring
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    ports:
      - '4000:5432'
    volumes:
      - user-data:/var/lib/postgresql/data

  post_db:
    image: mongo
    container_name: post_db
    restart: always
    ports:
      - '4001:27017'
    volumes:
      - posts-data:/data/db
    networks:
      - servers
      - monitoring

  message_db:
    image: mongo
    container_name: message_db
    restart: always
    ports:
      - '4003:27017'
    volumes:
      - message_data:/data/db
    networks:
      - servers
      - monitoring
      
  neo4j:
    image: neo4j:4.3.3-community #4.3.3-community  latest
    container_name: neo4j
    ports:
      - "4002:7687"
      - "7474:7474"
    networks:
      - servers
      - monitoring
    environment:
      - NEO4J_AUTH=none
      - NEO4J_dbms_memory_pagecache_size=512M

  nats:
    image: nats
    container_name: nats
    restart: on-failure
    networks:
      - servers
      - monitoring
    ports:
      - '4222:4222'


volumes:
  user-data:
    name: user-database
  posts-data:
    name: posts-database
  message_data:
    name: message-database

networks:
  servers:
    name: servers
    driver: bridge
  monitoring:
    external: true